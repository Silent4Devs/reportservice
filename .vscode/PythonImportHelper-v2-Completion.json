[
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "find_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "cursor",
        "importPath": "config.database",
        "description": "config.database",
        "isExtraImport": true,
        "detail": "config.database",
        "documentation": {}
    },
    {
        "label": "conexion",
        "importPath": "config.database",
        "description": "config.database",
        "isExtraImport": true,
        "detail": "config.database",
        "documentation": {}
    },
    {
        "label": "cursor",
        "importPath": "config.database",
        "description": "config.database",
        "isExtraImport": true,
        "detail": "config.database",
        "documentation": {}
    },
    {
        "label": "conexion",
        "importPath": "config.database",
        "description": "config.database",
        "isExtraImport": true,
        "detail": "config.database",
        "documentation": {}
    },
    {
        "label": "cursor",
        "importPath": "config.database",
        "description": "config.database",
        "isExtraImport": true,
        "detail": "config.database",
        "documentation": {}
    },
    {
        "label": "cursor",
        "importPath": "config.database",
        "description": "config.database",
        "isExtraImport": true,
        "detail": "config.database",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "get_column_letter",
        "importPath": "openpyxl.utils",
        "description": "openpyxl.utils",
        "isExtraImport": true,
        "detail": "openpyxl.utils",
        "documentation": {}
    },
    {
        "label": "load_workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "load_workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "plotly.graph_objects",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.graph_objects",
        "description": "plotly.graph_objects",
        "detail": "plotly.graph_objects",
        "documentation": {}
    },
    {
        "label": "GZipMiddleware",
        "importPath": "fastapi.middleware.gzip",
        "description": "fastapi.middleware.gzip",
        "isExtraImport": true,
        "detail": "fastapi.middleware.gzip",
        "documentation": {}
    },
    {
        "label": "reports",
        "importPath": "routes.reports",
        "description": "routes.reports",
        "isExtraImport": true,
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "dash",
        "importPath": "dashboards",
        "description": "dashboards",
        "isExtraImport": true,
        "detail": "dashboards",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "get_conexion",
        "kind": 2,
        "importPath": "config.database",
        "description": "config.database",
        "peekOfCode": "def get_conexion():\n    try:\n        conexion = psycopg2.connect(\n            dbname=DB_NAME,\n            user=DB_USER,\n            password=DB_PASSWORD,\n            host=DB_HOST,\n            port=DB_PORT\n        )\n        return conexion",
        "detail": "config.database",
        "documentation": {}
    },
    {
        "label": "DB_HOST",
        "kind": 5,
        "importPath": "config.database",
        "description": "config.database",
        "peekOfCode": "DB_HOST = os.getenv(\"DB_HOST\")\nDB_PORT = os.getenv(\"DB_PORT\")\nDB_NAME = os.getenv(\"DB_NAME\")\nDB_USER = os.getenv(\"DB_USER\")\nDB_PASSWORD = os.getenv(\"DB_PASSWORD\")\ndef get_conexion():\n    try:\n        conexion = psycopg2.connect(\n            dbname=DB_NAME,\n            user=DB_USER,",
        "detail": "config.database",
        "documentation": {}
    },
    {
        "label": "DB_PORT",
        "kind": 5,
        "importPath": "config.database",
        "description": "config.database",
        "peekOfCode": "DB_PORT = os.getenv(\"DB_PORT\")\nDB_NAME = os.getenv(\"DB_NAME\")\nDB_USER = os.getenv(\"DB_USER\")\nDB_PASSWORD = os.getenv(\"DB_PASSWORD\")\ndef get_conexion():\n    try:\n        conexion = psycopg2.connect(\n            dbname=DB_NAME,\n            user=DB_USER,\n            password=DB_PASSWORD,",
        "detail": "config.database",
        "documentation": {}
    },
    {
        "label": "DB_NAME",
        "kind": 5,
        "importPath": "config.database",
        "description": "config.database",
        "peekOfCode": "DB_NAME = os.getenv(\"DB_NAME\")\nDB_USER = os.getenv(\"DB_USER\")\nDB_PASSWORD = os.getenv(\"DB_PASSWORD\")\ndef get_conexion():\n    try:\n        conexion = psycopg2.connect(\n            dbname=DB_NAME,\n            user=DB_USER,\n            password=DB_PASSWORD,\n            host=DB_HOST,",
        "detail": "config.database",
        "documentation": {}
    },
    {
        "label": "DB_USER",
        "kind": 5,
        "importPath": "config.database",
        "description": "config.database",
        "peekOfCode": "DB_USER = os.getenv(\"DB_USER\")\nDB_PASSWORD = os.getenv(\"DB_PASSWORD\")\ndef get_conexion():\n    try:\n        conexion = psycopg2.connect(\n            dbname=DB_NAME,\n            user=DB_USER,\n            password=DB_PASSWORD,\n            host=DB_HOST,\n            port=DB_PORT",
        "detail": "config.database",
        "documentation": {}
    },
    {
        "label": "DB_PASSWORD",
        "kind": 5,
        "importPath": "config.database",
        "description": "config.database",
        "peekOfCode": "DB_PASSWORD = os.getenv(\"DB_PASSWORD\")\ndef get_conexion():\n    try:\n        conexion = psycopg2.connect(\n            dbname=DB_NAME,\n            user=DB_USER,\n            password=DB_PASSWORD,\n            host=DB_HOST,\n            port=DB_PORT\n        )",
        "detail": "config.database",
        "documentation": {}
    },
    {
        "label": "conexion",
        "kind": 5,
        "importPath": "config.database",
        "description": "config.database",
        "peekOfCode": "conexion = get_conexion()\nif conexion is not None:\n    cursor = conexion.cursor()\n    # Ahora puedes usar el cursor para ejecutar consultas\nelse:\n    print(\"No se pudo establecer la conexión a la base de datos.\")\n# URL_DATABASE = f\"postgresql://{DBUSER}:{DBPASS}@{DBHOST}:{DBPORT}/{DBNAME}\"\n# engine = create_engine(URL_DATABASE)\n# meta = MetaData()\n# conn = engine.connect()",
        "detail": "config.database",
        "documentation": {}
    },
    {
        "label": "getEmpleados",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getEmpleados():\n    return {\"message\": \"empleados\"}\n# Users #############\n@reports.get('/Users', tags=[\"ReportsXls\"])\ndef retrieve_all_item():\n    query = \"\"\"\n            select  \n            e.name as \"Nombre\", \n            e.email as \"Correo Electrónico\", \n            r.title as \"Roles\",",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "retrieve_all_item",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def retrieve_all_item():\n    query = \"\"\"\n            select  \n            e.name as \"Nombre\", \n            e.email as \"Correo Electrónico\", \n            r.title as \"Roles\",\n            e.name as \"Empleado Vinculado\",\n            a.area as \"Área\", \n            p.puesto as \"Puesto\"\n            from empleados e  ",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getempleadosPuestos",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getempleadosPuestos():\n    query = \"\"\"\n            select \n            e.name as \"Empleado\",\n            s.name as \"Supervisor\",\n            a.area as \"Área\",\n            p.puesto as \"Puesto\"\n            from empleados e\n            left join empleados s on e.supervisor_id=s.id\n            inner join areas a on e.area_id=a.id",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getPuestos",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getPuestos():\n    query = \"\"\"\n            select \n            p.puesto as \"Puesto\", \n            a.area as \"Área\", \n            a.descripcion as \"Descripción\" \n            from puestos p \n            inner join \n            areas a on p.id_area=a.id            \n            where p.deleted_at is null ",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getRoles",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getRoles():\n    query = \"\"\"\n            select r.id as \"ID\", r.title as \"Nombre del rol\"\n            from roles r \n            where r.deleted_at is null;\n        \"\"\"\n    resultados = ejecutar_consulta_sql(cursor, query)\n    fileRoute = DirectoryEmpleados + \"roles-\" + str(now) + \".xlsx\"\n    exportar_a_excel(\n        resultados, fileRoute)",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getsoporte",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getsoporte():\n    query = \"\"\"\n            select \n            cs.id as \"ID\",\n            cs.rol as \"Rol\",\n            e.name as \"Nombre\",\n            p.puesto as \"Puesto\", \n            cs.telefono as \"Teléfono\", \n            cs.extension as \"Extensión\",\n            cs.tel_celular as \"Tel. Celular\",",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getmoduloEmpleados",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getmoduloEmpleados():\n    query = \"\"\"\n            select \n            e.n_empleado as \"No.Empleado\",\n            e.name as \"Nombre\",\n            e.email as \"Email\",\n            e.telefono as \"Teléfono\",\n            a.area as \"Área\",\n            p.puesto as \"Puesto\",\n            s.name as \"Supervisor\",",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getmoduloSedes",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getmoduloSedes():\n    query = \"\"\"\n            select \n            s.id as \"ID\",\n            s.sede as \"Sede\", \n            s.direccion as \"Dirección\",\n            s.descripcion as \"Descripción\",\n            o.empresa as \"Empresa\"\n            from sedes s \n            inner join organizacions o on s.organizacion_id=o.id ",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getnivelesJerarquicos",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getnivelesJerarquicos():\n    query = \"\"\"\n            select pe.nombre as \"Nivel\", descripcion as \"Descripción\" \n            from perfil_empleados pe  \n            where pe.deleted_at is null\n        \"\"\"\n    resultados = ejecutar_consulta_sql(cursor, query)\n    fileRoute = DirectoryEmpleados + \"niveles-jerarquicos-\" + str(now) + \".xlsx\"\n    exportar_a_excel(\n        resultados, fileRoute)",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getregistroAreas",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getregistroAreas():\n    query = \"\"\"\n            select \n            a.id as \"ID\",\n            a.area as \"Nombre de área\",\n            g.nombre as \"Grupo\",\n            r.area as \"Reporta a\",\n            a.descripcion as \"Descripción\"\n            from areas a \n            inner join grupos g on a.id_grupo=g.id",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getmacroProcesos",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getmacroProcesos():\n    query = \"\"\"\n            select \n            m.codigo as \"Código\",\n            m.nombre as \"Nombre\",\n            g.nombre as \"Grupo\" ,\n            m.descripcion as \"Descripción\" \n            from macroprocesos m \n            inner join grupos g on m.id_grupo=g.id \n            order by m.created_at asc",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getmoduloProcesos",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getmoduloProcesos():\n    query = \"\"\"\n            select \n            p.codigo as \"Código\",\n            p.nombre as \"Nombre del proceso\", \n            m.nombre as \"Macroproceso\",\n            p.descripcion as \"Descripción\"\n            from procesos p \n            inner join macroprocesos m on p.id_macroproceso=m.id \n            order by p.created_at asc",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getmoduloTipoActivos",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getmoduloTipoActivos():\n    query = \"\"\"\n            select \n            t.id as \"ID\",\n            t.tipo as \"Categoria\"\n            from tipoactivos t \n            order by t.created_at asc\n            where t.deleted_at is null\n            order by t.created_at asc\n        \"\"\"",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getmoduloActivos",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getmoduloActivos():\n    query = \"\"\"\n            select \n            t.id as \"ID\",\n            t.tipo as \"Categoria\",\n            sa.subcategoria as \"Subcategoría\"\n            from tipoactivos t \n            inner join subcategoria_activos sa on t.id =sa.categoria_id  \n            order by t.created_at asc \n            where t.deleted_at is null",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getinventarioActivos",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getinventarioActivos():\n    query = \"\"\"\n            select \n            a.id as \"ID\" ,\n            a.nombreactivo as \"Nombre del activo\",\n            t.tipo as \"Categoria\", \n            sa.subcategoria as \"Subcategoría\",\n            a.descripcion as \"Descripción\",\n            e.name as \"Dueño\",\n            s.name as \"Responsable\"",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getglosario",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getglosario():\n    query = \"\"\"\n            select \n            g.numero as \"Inciso\",\n            concepto as \"Concepto\", \n            norma as \"Modulo\",\n            definicion as \"Definición\", \n            explicacion as \"Explicación\" \n            from glosarios g \n            where g.deleted_at is null ",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getcategoriasCapacitaciones",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getcategoriasCapacitaciones():\n    query = \"\"\"\n            select distinct cc.nombre as \"Nombre\"\n            from recursos r \n            inner join categoria_capacitacions cc on r.categoria_capacitacion_id =cc.id  ;\n        \"\"\"\n    resultados = ejecutar_consulta_sql(cursor, query)\n    fileRoute = DirectoryEmpleados + \"categoriasCapacitaciones\" + str(now) + \".xlsx\"\n    exportar_a_excel(\n        resultados, fileRoute)",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getvisualizarLogs",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getvisualizarLogs():\n    query = \"\"\"\n            select \n            u.name as \"Nombre\",\n            a.event as \"Evento\",\n            a.old_values as \"Antiguos valores\",\n            a.new_values as \"Nuevos valores\",\n            a.url as \"Url\",\n            a.created_at as \"Fecha de creación\",\n            a.updated_at as \"Fecha de actualización\"",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getregistroTimesheet",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getregistroTimesheet():\n    query = \"\"\"\n            select \n            th.created_at as \"Fecha inicio\",\n            th.updated_at as \"Fecha fin\",\n            e.name as \"Empleado\",\n            p.name as \"Aprobador\",\n            a.area as \"Área\",\n            t.estatus as \"Estatus\",\n            sum(",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "gettimesheetAreas",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def gettimesheetAreas():\n    query = \"\"\"\n            select \n            e.name as \"Nombre\",\n            p.puesto as \"Puesto\",\n            a.area as \"Área\",\n            e.estatus as \"Estatus\",\n            e.antiguedad as \"Fecha\"\n            from empleados e \n            inner join puestos p on e.puesto_id =p.id ",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "gettimesheetProyectos",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def gettimesheetProyectos():\n    query = \"\"\"\n            select \n            tp.proyecto as \"ID-Proyecto\",\n            string_agg(distinct a.area, ', ') as \"Áreas participantes\",\n            string_agg(distinct e.name, ', ') as \"Empleados participantes\",\n            tc.nombre as \"Cliente\"\n            from timesheet_proyectos tp \n            left join timesheet_proyectos_empleados tpe on tp.id=tpe.proyecto_id \n            left join timesheet_proyectos_areas tpa on tp.id =tpe.proyecto_id ",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getcolaboradoresTareas",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getcolaboradoresTareas():\n    query = \"\"\"\n            select \n            tp.fecha_inicio as \"Fecha inicio\", \n            tp.fecha_fin as \"Fecha fin\",\n            string_agg(distinct e.name, ', ') as  \"Empleado\",\n            string_agg(distinct s.name, ', ') as \"Supervisor\",\n            string_agg(distinct tp.proyecto, ', ') as \"Proyecto\",\n            string_agg(distinct tt.tarea, ', ') as \"Tarea\",\n            th.descripcion as \"Descripción\",",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "gettimesheetFinanciero",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def gettimesheetFinanciero():\n    query = \"\"\"\n            tc.nombre as \"Cliente\",\n            a.area as \"Área(s)\",\n            e.name as \"Empleados participantes\",\n            tpe.horas_asignadas as \"Horas del empleado\",\n            tpe.horas_asignadas * tpe.costo_hora as \"Costo total del empleado\",\n            tp.estatus as \"Estatus\",\n            sum(tpe.horas_asignadas)over(partition by tpe.proyecto_id) as \"Horas totales del proyecto\",\n            sum(tpe.horas_asignadas * tpe.costo_hora) over(partition by tpe.proyecto_id) as \"Costo total del Proyecto\"",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getsolicitudesDayOff",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getsolicitudesDayOff():\n    query = \"\"\"\n            select e.name as \"Solicitante\",\n            sd.descripcion as \"Descripcion\",\n            to_char(sd.año, 'FM9999') as \"Año\",\n            sd.dias_solicitados as \"Días solicitados\",\n            sd.fecha_inicio as \"Inicio\",\n            sd.fecha_fin as \"Fin\",\n            case  \n                when sd.aprobacion = 3 then 'Aprobado'",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getsolicitudesVacaciones",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getsolicitudesVacaciones():\n    query = \"\"\"\n            select e.name as \"Solicitante\",\n            sv.descripcion as \"Descripción\",\n            sv.año as \"Periodo\",\n            sv.dias_solicitados  as \"Días solicitados\",\n            sv.fecha_inicio as \"Inicio\",\n            sv.fecha_fin as \"Fin\",\n            case  \n                when sv.aprobacion = 3 then 'Aprobado'",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "getevaluaciones360",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def getevaluaciones360():\n    query = \"\"\"\n            select id as \"ID\",\n            nombre as \"Nombre\",\n            case  \n                when estatus:: integer = 3 then 'Cerrado'\n                when estatus:: integer = 2 then 'Abierto'\n                when estatus:: integer = 1 then 'Pendiente'\n                else 'desconocido'\n            end as \"Estatus\",",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "ejecutar_consulta_sql",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def ejecutar_consulta_sql(cursor, consulta):\n    try:\n        cursor.execute(consulta)\n        resultados = cursor.fetchall()\n        return resultados\n    except psycopg2.Error as e:\n        print(\"Error al ejecutar la consulta SQL:\" + str(e))\n        # return JSONResponse(content={\"message\": \"Error al ejecutar la consulta SQL.\"})\n        raise HTTPException(\n            status_code=500, detail=\"Error executing SQL query: \" + str(e))",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "exportar_a_excel",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def exportar_a_excel(resultados, nombre_archivo):\n    try:\n        if resultados is not None:\n            df = pd.DataFrame(resultados, columns=[\n                desc[0] for desc in cursor.description])\n            df.to_excel(nombre_archivo, index=False)\n            print(\"Resultados exportados a\", nombre_archivo)\n    except Exception as e:\n        print(\"No se pudieron exportar los resultados a Excel debido a un error.\" + str(e))\n        raise HTTPException(",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "ajustar_columnas",
        "kind": 2,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "def ajustar_columnas(nombre_archivo):\n    try:\n        workbook = load_workbook(nombre_archivo)\n        worksheet = workbook.active\n        for col in worksheet.columns:\n            max_length = 0\n            column = col[0].column_letter  # Get the column name\n            for cell in col:\n                try:\n                    if len(str(cell.value)) > max_length:",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "app = FastAPI()\nreports = APIRouter()\nDirectoryEmpleados = \"reportsfile/administracion/empleados/\"\n# Validar si la carpeta ya existe\nif not os.path.exists(DirectoryEmpleados):\n    # Si no existe, crear la carpeta\n    os.makedirs(DirectoryEmpleados)\nnow = date.today()\n@reports.get('/empleados', tags=[\"ReportsXls\"])\ndef getEmpleados():",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "reports",
        "kind": 5,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "reports = APIRouter()\nDirectoryEmpleados = \"reportsfile/administracion/empleados/\"\n# Validar si la carpeta ya existe\nif not os.path.exists(DirectoryEmpleados):\n    # Si no existe, crear la carpeta\n    os.makedirs(DirectoryEmpleados)\nnow = date.today()\n@reports.get('/empleados', tags=[\"ReportsXls\"])\ndef getEmpleados():\n    return {\"message\": \"empleados\"}",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "DirectoryEmpleados",
        "kind": 5,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "DirectoryEmpleados = \"reportsfile/administracion/empleados/\"\n# Validar si la carpeta ya existe\nif not os.path.exists(DirectoryEmpleados):\n    # Si no existe, crear la carpeta\n    os.makedirs(DirectoryEmpleados)\nnow = date.today()\n@reports.get('/empleados', tags=[\"ReportsXls\"])\ndef getEmpleados():\n    return {\"message\": \"empleados\"}\n# Users #############",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "routes.reports",
        "description": "routes.reports",
        "peekOfCode": "now = date.today()\n@reports.get('/empleados', tags=[\"ReportsXls\"])\ndef getEmpleados():\n    return {\"message\": \"empleados\"}\n# Users #############\n@reports.get('/Users', tags=[\"ReportsXls\"])\ndef retrieve_all_item():\n    query = \"\"\"\n            select  \n            e.name as \"Nombre\", ",
        "detail": "routes.reports",
        "documentation": {}
    },
    {
        "label": "registros_timesheet_estatus",
        "kind": 2,
        "importPath": "dashboards",
        "description": "dashboards",
        "peekOfCode": "def registros_timesheet_estatus(): \n    # Definir el query\n    query = \"\"\"\n    SELECT\n        count(case when t.estatus = 'aprobado' then 1 end) as \"Aprobado\",\n        count(case when t.estatus = 'pendiente' then 1 end) as \"Pendiente\",\n        count(case when t.estatus = 'rechazado' then 1 end) as \"Rechazado\",\n        count(case when t.estatus = 'borrador' then 1 end) as \"Borrador\",\n        a.area as \"Área\"\n    FROM timesheet t",
        "detail": "dashboards",
        "documentation": {}
    },
    {
        "label": "get_timesheet_estatus",
        "kind": 2,
        "importPath": "dashboards",
        "description": "dashboards",
        "peekOfCode": "def get_timesheet_estatus():\n    try:\n        graph_json = registros_timesheet_estatus()\n        return JSONResponse(content=graph_json)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n################################################\nif cursor is None:\n    raise HTTPException(status_code=500, detail=\"No se pudo establecer la conexión a la base de datos\")\ndef registros_timesheet_area():",
        "detail": "dashboards",
        "documentation": {}
    },
    {
        "label": "registros_timesheet_area",
        "kind": 2,
        "importPath": "dashboards",
        "description": "dashboards",
        "peekOfCode": "def registros_timesheet_area():\n    query = \"\"\"\n                select\n                a.area as \"Área\",\n                sum(\n                    coalesce(cast(nullif(th.horas_lunes, '') as numeric), 0) +\n                    coalesce(cast(nullif(th.horas_martes, '') as numeric), 0) +\n                    coalesce(cast(nullif(th.horas_miercoles, '') as numeric), 0) +\n                    coalesce(cast(nullif(th.horas_jueves, '') as numeric), 0) +\n                    coalesce(cast(nullif(th.horas_viernes, '') as numeric), 0) +",
        "detail": "dashboards",
        "documentation": {}
    },
    {
        "label": "registros_timesheet_status_dona",
        "kind": 2,
        "importPath": "dashboards",
        "description": "dashboards",
        "peekOfCode": "def registros_timesheet_status_dona():\n    query = \"\"\"\n        SELECT\n            sum(case when t.estatus = 'aprobado' then 1 else 0 end) as \"Aprobado\",\n            sum(case when t.estatus = 'pendiente' then 1 else 0 end) as \"Pendiente\",\n            sum(case when t.estatus = 'rechazado' then 1 else 0 end) as \"Rechazado\",\n            sum(case when t.estatus = 'borrador' then 1 else 0 end) as \"Borrador\"\n        FROM timesheet t;\n    \"\"\"\n    df = pd.read_sql(query, conexion)",
        "detail": "dashboards",
        "documentation": {}
    },
    {
        "label": "registros_tsempleados_estatus",
        "kind": 2,
        "importPath": "dashboards",
        "description": "dashboards",
        "peekOfCode": "def registros_tsempleados_estatus(): \n    # Definir el query\n    query = \"\"\"\n            select e.name as \"Empleado\",\n            a.area as \"Área\",\n            sum(case when t.estatus = 'aprobado' then 1 else 0 end) as \"Aprobado\",\n            sum(case when t.estatus = 'pendiente' then 1 else 0 end) as \"Pendiente\",\n            sum(case when t.estatus = 'rechazado' then 1 else 0 end) as \"Rechazado\",\n            sum(case when t.estatus = 'borrador' then 1 else 0 end) as \"Borrador\"\n            from timesheet t",
        "detail": "dashboards",
        "documentation": {}
    },
    {
        "label": "registros_timesheetArea_dona",
        "kind": 2,
        "importPath": "dashboards",
        "description": "dashboards",
        "peekOfCode": "def registros_timesheetArea_dona():\n    query = \"\"\"\n                select\n                a.area as \"Área\",\n                sum(\n                    coalesce(cast(nullif(th.horas_lunes, '') as numeric), 0) +\n                    coalesce(cast(nullif(th.horas_martes, '') as numeric), 0) +\n                    coalesce(cast(nullif(th.horas_miercoles, '') as numeric), 0) +\n                    coalesce(cast(nullif(th.horas_jueves, '') as numeric), 0) +\n                    coalesce(cast(nullif(th.horas_viernes, '') as numeric), 0) +",
        "detail": "dashboards",
        "documentation": {}
    },
    {
        "label": "registros_timesheetMes_dona",
        "kind": 2,
        "importPath": "dashboards",
        "description": "dashboards",
        "peekOfCode": "def registros_timesheetMes_dona():\n    query = \"\"\"\n        select\n            sum(case when t.estatus = 'aprobado' then 1 else 0 end) as \"Registros Aprobados\",\n            sum(case when t.estatus = 'rechazado' then 1 else 0 end) as \"Registros Rechazados\",\n            sum(case when t.estatus = 'pendiente' then 1 else 0 end) as \"Pendiente\",\n            sum(case when t.estatus = 'borrador' then 1 else 0 end) as \"Borrador\",\n            count(*) as \"Registros Totales\"\n        from (\n        select *",
        "detail": "dashboards",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def message():\n    return {\"Hello World!\"}\n@app.get('/movies', tags=[\"Movies\"])\ndef movies():\n    return JSONResponse(content={\"message\": \"movies\"})",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "movies",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def movies():\n    return JSONResponse(content={\"message\": \"movies\"})",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\napp.add_middleware(GZipMiddleware, minimum_size=1000)\napp.title = os.getenv(\"APP_NAME\")\napp.version = os.getenv(\"APP_VERSION\")\napp.include_router(reports)\napp.include_router(dash)\n# tags=[\"Home\"] es una etiqueta que se le asigna a la ruta para poder agruparla en la documentación\n@app.get('/', tags=[\"Home\"])\ndef message():\n    return {\"Hello World!\"}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app.title",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app.title = os.getenv(\"APP_NAME\")\napp.version = os.getenv(\"APP_VERSION\")\napp.include_router(reports)\napp.include_router(dash)\n# tags=[\"Home\"] es una etiqueta que se le asigna a la ruta para poder agruparla en la documentación\n@app.get('/', tags=[\"Home\"])\ndef message():\n    return {\"Hello World!\"}\n@app.get('/movies', tags=[\"Movies\"])\ndef movies():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app.version",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app.version = os.getenv(\"APP_VERSION\")\napp.include_router(reports)\napp.include_router(dash)\n# tags=[\"Home\"] es una etiqueta que se le asigna a la ruta para poder agruparla en la documentación\n@app.get('/', tags=[\"Home\"])\ndef message():\n    return {\"Hello World!\"}\n@app.get('/movies', tags=[\"Movies\"])\ndef movies():\n    return JSONResponse(content={\"message\": \"movies\"})",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "registros_timesheetMes_dona",
        "kind": 2,
        "importPath": "pruebabarras",
        "description": "pruebabarras",
        "peekOfCode": "def registros_timesheetMes_dona():\n    query = \"\"\"\n        select\n            sum(case when t.estatus = 'aprobado' then 1 else 0 end) as \"Aprobado\",\n            sum(case when t.estatus = 'rechazado' then 1 else 0 end) as \"Rechazado\",\n            sum(case when t.estatus = 'pendiente' then 1 else 0 end) as \"Pendiente\",\n            sum(case when t.estatus = 'borrador' then 1 else 0 end) as \"Borrador\",\n            count(*) as \"Registros Totales\"\n        from timesheet t\n        where t.estatus IN ('aprobado', 'rechazado')",
        "detail": "pruebabarras",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "pruebafiltros",
        "description": "pruebafiltros",
        "peekOfCode": "def read_root():\n    return {\"message\": \"hola\"}\n# Registro Timesheet *\n@app.post('/registrosTimesheet/', tags=[\"ReportsXls\"])\ndef get_registro_timesheet(\n    area: Optional[str] = None,\n    empleado: Optional[str] = None,\n    fecha_inicio: Optional[str] = None,\n    fecha_fin: Optional[str] = None\n):",
        "detail": "pruebafiltros",
        "documentation": {}
    },
    {
        "label": "get_registro_timesheet",
        "kind": 2,
        "importPath": "pruebafiltros",
        "description": "pruebafiltros",
        "peekOfCode": "def get_registro_timesheet(\n    area: Optional[str] = None,\n    empleado: Optional[str] = None,\n    fecha_inicio: Optional[str] = None,\n    fecha_fin: Optional[str] = None\n):\n    if fecha_inicio and fecha_fin:\n        try:\n            fecha_inicio_dt = datetime.strptime(fecha_inicio, \"%Y-%m-%d\")\n            fecha_fin_dt = datetime.strptime(fecha_fin, \"%Y-%m-%d\")",
        "detail": "pruebafiltros",
        "documentation": {}
    },
    {
        "label": "gettimesheetAreas",
        "kind": 2,
        "importPath": "pruebafiltros",
        "description": "pruebafiltros",
        "peekOfCode": "def gettimesheetAreas(area: str, fecha_inicio: str, fecha_fin: str):\n    pprint.pprint(f\"Area: {area}, Fecha inicio: {\n                  fecha_inicio}, Fecha fin: {fecha_fin}\")\n    try:\n        fecha_inicio_dt = datetime.strptime(fecha_inicio, \"%Y-%m-%d\")\n        fecha_fin_dt = datetime.strptime(fecha_fin, \"%Y-%m-%d\")\n    except ValueError:\n        raise HTTPException(\n            status_code=400, detail=\"Formato de fecha incorrecto. Use 'YYYY-MM-DD'.\")\n    query = \"\"\"",
        "detail": "pruebafiltros",
        "documentation": {}
    },
    {
        "label": "gettimesheetProyectos",
        "kind": 2,
        "importPath": "pruebafiltros",
        "description": "pruebafiltros",
        "peekOfCode": "def gettimesheetProyectos(area: str, proyecto: str, fecha_inicio: str, fecha_fin: str):\n    pprint.pprint(f\"Area: {area}, Proyecto: {proyecto}, Fecha inicio: {\n                  fecha_inicio}, Fecha fin: {fecha_fin}\")\n    try:\n        fecha_inicio_dt = datetime.strptime(fecha_inicio, \"%Y-%m-%d\")\n        fecha_fin_dt = datetime.strptime(fecha_fin, \"%Y-%m-%d\")\n    except ValueError:\n        raise HTTPException(\n            status_code=400, detail=\"Formato de fecha incorrecto. Use 'YYYY-MM-DD'.\")\n    query = \"\"\"",
        "detail": "pruebafiltros",
        "documentation": {}
    },
    {
        "label": "getcolaboradoresTareas",
        "kind": 2,
        "importPath": "pruebafiltros",
        "description": "pruebafiltros",
        "peekOfCode": "def getcolaboradoresTareas(empleado: str, area: str,  fecha_inicio: str, fecha_fin: str):\n    pprint.pprint(f\"Empleado: {empleado},Area: {area},  Fecha inicio: {\n                  fecha_inicio}, Fecha fin: {fecha_fin}\")\n    try:\n        fecha_inicio_dt = datetime.strptime(fecha_inicio, \"%Y-%m-%d\")\n        fecha_fin_dt = datetime.strptime(fecha_fin, \"%Y-%m-%d\")\n    except ValueError:\n        raise HTTPException(\n            status_code=400, detail=\"Formato de fecha incorrecto. Use 'YYYY-MM-DD'.\")\n    query = \"\"\"",
        "detail": "pruebafiltros",
        "documentation": {}
    },
    {
        "label": "gettimesheetFinanciero",
        "kind": 2,
        "importPath": "pruebafiltros",
        "description": "pruebafiltros",
        "peekOfCode": "def gettimesheetFinanciero(proyecto: str):\n    pprint.pprint(f\"Proyecto: {proyecto}\")\n    query = \"\"\"\n            tp.identificador as \"ID\",\n            tp.proyecto as \"Proyecto\",\n            tc.nombre as \"Cliente\",\n            a.area as \"Área(s)\",\n            e.name as \"Empleados participantes\",\n            tpe.horas_asignadas as \"Horas del empleado\",\n            tpe.horas_asignadas * tpe.costo_hora as \"Costo total del empleado\",",
        "detail": "pruebafiltros",
        "documentation": {}
    },
    {
        "label": "ejecutar_consulta_sql",
        "kind": 2,
        "importPath": "pruebafiltros",
        "description": "pruebafiltros",
        "peekOfCode": "def ejecutar_consulta_sql(cursor, consulta):\n    try:\n        cursor.execute(consulta)\n        resultados = cursor.fetchall()\n        return resultados\n    except psycopg2.Error as e:\n        print(\"Error al ejecutar la consulta SQL:\" + str(e))\n        # return JSONResponse(content={\"message\": \"Error al ejecutar la consulta SQL.\"})\n        raise HTTPException(\n            status_code=500, detail=\"Error executing SQL query: \" + str(e))",
        "detail": "pruebafiltros",
        "documentation": {}
    },
    {
        "label": "exportar_a_excel",
        "kind": 2,
        "importPath": "pruebafiltros",
        "description": "pruebafiltros",
        "peekOfCode": "def exportar_a_excel(resultados, nombre_archivo):\n    try:\n        if resultados is not None:\n            df = pd.DataFrame(resultados, columns=[\n                desc[0] for desc in cursor.description])\n            df.to_excel(nombre_archivo, index=False)\n            print(\"Resultados exportados a\", nombre_archivo)\n    except Exception as e:\n        print(\"No se pudieron exportar los resultados a Excel debido a un error.\" + str(e))\n        raise HTTPException(",
        "detail": "pruebafiltros",
        "documentation": {}
    },
    {
        "label": "ajustar_columnas",
        "kind": 2,
        "importPath": "pruebafiltros",
        "description": "pruebafiltros",
        "peekOfCode": "def ajustar_columnas(nombre_archivo):\n    try:\n        workbook = load_workbook(nombre_archivo)\n        worksheet = workbook.active\n        for col in worksheet.columns:\n            max_length = 0\n            column = col[0].column_letter  # Get the column name\n            for cell in col:\n                try:\n                    if len(str(cell.value)) > max_length:",
        "detail": "pruebafiltros",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "pruebafiltros",
        "description": "pruebafiltros",
        "peekOfCode": "app = FastAPI()\nDirectoryEmpleados = \"reportsfile/administracion/empleados/\"\n# Validar si la carpeta ya existe\nif not os.path.exists(DirectoryEmpleados):\n    # Si no existe, crear la carpeta\n    os.makedirs(DirectoryEmpleados)\nnow = date.today()\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"hola\"}",
        "detail": "pruebafiltros",
        "documentation": {}
    },
    {
        "label": "DirectoryEmpleados",
        "kind": 5,
        "importPath": "pruebafiltros",
        "description": "pruebafiltros",
        "peekOfCode": "DirectoryEmpleados = \"reportsfile/administracion/empleados/\"\n# Validar si la carpeta ya existe\nif not os.path.exists(DirectoryEmpleados):\n    # Si no existe, crear la carpeta\n    os.makedirs(DirectoryEmpleados)\nnow = date.today()\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"hola\"}\n# Registro Timesheet *",
        "detail": "pruebafiltros",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "pruebafiltros",
        "description": "pruebafiltros",
        "peekOfCode": "now = date.today()\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"hola\"}\n# Registro Timesheet *\n@app.post('/registrosTimesheet/', tags=[\"ReportsXls\"])\ndef get_registro_timesheet(\n    area: Optional[str] = None,\n    empleado: Optional[str] = None,\n    fecha_inicio: Optional[str] = None,",
        "detail": "pruebafiltros",
        "documentation": {}
    }
]